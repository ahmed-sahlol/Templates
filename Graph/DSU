struct dsu {
    vector<int> parent, group;

    dsu(int n) {
        parent = vector<int>(n + 1);
        iota(parent.begin(), parent.end(), 0);
        group = vector<int>(n + 1, 1);
    }

    int find(int i) {
        if (parent[i] == i) {
            return i;
        }
        return parent[i] = find(parent[i]);
    }

    bool samegroup(int x, int y) {
        return find(x) == find(y);
    }

    bool merge(int x, int y) {
        int leader1 = find(x);
        int leader2 = find(y);
        if (leader1 == leader2) return 0;
        if (group[leader1] > group[leader2]) swap(leader1, leader2);
        group[leader2] += group[leader1];
        parent[leader1] = leader2;
        return 1;
    }

    int getsize(int x) {
        return group[find(x)];
    }
};

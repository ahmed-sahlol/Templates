const int N = 2e5 + 5, oo = 1e18;

vector<pair<int, int>> adj[N];

int dist[N];

int parent[N];

int n, m;

void clear() {
    for (int i = 1; i <= n; i++) {
        adj[i].clear();
    }
}

void dijkstra(int src) {
    for (int i = 1; i <= n; ++i) dist[i] = oo;
    dist[src] = 0;
    parent[src] = -1;

    priority_queue<pair<int, int>> pq;
    pq.push({0, src});

    while (!pq.empty()) {
        int u = pq.top().second;
        int cost = -pq.top().first;
        pq.pop();

        if (dist[u] < cost) continue;

        for (auto [v, w]: adj[u]) {
            if (dist[v] > dist[u] + w) {
                dist[v] = dist[u] + w;
                parent[v] = u;
                pq.push({-dist[v], v});
            }
        }
    }
}

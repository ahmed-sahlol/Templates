#include <bits/stdc++.h>

#define int long long

#define el '\n'

using namespace std;

const int N = 1e5 + 5;
int n, k, v[N], dp_before[N], dp_curr[N], freq[N];

void work() {
    cin >> n >> k;

    int curr_l = 0, curr_r = -1, tot = 0;

    auto calc = [&](int x) -> int { return x * (x - 1) / 2; };

    auto add = [&](int idx) {
        int me = v[idx];
        tot -= calc(freq[me]);
        freq[me]++;
        tot += calc(freq[me]);
    };

    auto remove = [&](int idx) {
        int me = v[idx];
        tot -= calc(freq[me]);
        freq[me]--;
        tot += calc(freq[me]);
    };

    auto upd = [&](int lq, int rq) -> int {
        while (curr_r < rq) add(++curr_r);
        while (curr_l > lq) add(--curr_l);
        while (curr_r > rq) remove(curr_r--);
        while (curr_l < lq) remove(curr_l++);
        return tot;
    };

    for (int i = 0; i < n; ++i)cin >> v[i];
    for (int i = 0; i < n; ++i) dp_before[i] = upd(0, i);

    function<void(int, int, int, int)> solve = [&](int l, int r, int bestl, int bestr) -> void {
        if (l > r) return;
        pair<int, int> best = {1e18, 1e18};
        int mid = (l + r) / 2;

        for (int i = bestl; i <= min(bestr, mid); i++)
            best = min(best, make_pair(upd(i, mid) + (i ? dp_before[i - 1] : 0), i));

        dp_curr[mid] = best.first;
        int opt = best.second;

        solve(l, mid - 1, bestl, opt);
        solve(mid + 1, r, opt, bestr);
    };

    for (int i = 0; i < k; ++i) {
        solve(0, n - 1, 0, n - 1);
        swap(dp_before, dp_curr);
    }

    cout << dp_curr[n - 1] << el;
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    int tc = 1;
//    cin >> tc;
    for (int T = 1; T <= tc; ++T) {
//        cout << "Case " << T << ": ";
        work();
    }
}

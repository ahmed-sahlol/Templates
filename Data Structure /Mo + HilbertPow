struct MO {

    struct query {
        int l, r, idx, HilbertPow;
        int64_t ord;

        inline int64_t hilbertOrder(int x, int y, int pow, int rotate) {
            if (pow == 0) {
                return 0;
            }
            int hpow = 1 << (pow - 1);
            int seg = (x < hpow) ? ((y < hpow) ? 0 : 3) : ((y < hpow) ? 1 : 2);
            seg = (seg + rotate) & 3;
            const int rotateDelta[4] = {3, 0, 0, 1};
            int nx = x & (x ^ hpow), ny = y & (y ^ hpow);
            int nrot = (rotate + rotateDelta[seg]) & 3;
            int64_t subSquareSize = int64_t(1) << (2 * pow - 2);
            int64_t anss = seg * subSquareSize;
            int64_t add = hilbertOrder(nx, ny, pow - 1, nrot);
            anss += (seg == 1 || seg == 2) ? add : (subSquareSize - add - 1);
            return anss;
        }


        query(int l1 = 0, int r1 = 0, int ind = 0, int hilbertpow = 0) {
            l = l1, r = r1, idx = ind, HilbertPow = hilbertpow;
            ord = hilbertOrder(l, r, HilbertPow, 0);
        }


        bool operator<(const query &q) {
            return ord < q.ord;
        }
    };

    int curr_l, curr_r, ans, n, m, Sqrt_N;
    vector<int> answers, nums;
    vector<query> queries;
    int HilbertPow;


    MO(int N = 0, int M = 0) {
        curr_l = 1, curr_r = 0, ans = 0, n = N, m = M, Sqrt_N = sqrtl(N) + 1;
        queries = vector<query>(m);
        answers = vector<int>(m);
        nums = vector<int>(N + 5);
        HilbertPow = calcHilbertPow(n);
    }

    void Get_Data(vector<int> &v) {
        // get the array and set the queries
        nums = v;

        for (int i = 0; i < m; i++) {
            int l, r;
            cin >> l >> r;
            l--, --r;
            queries[i] = query(l, r, i, HilbertPow);
        }
    }

    int calcHilbertPow(int max_n) {
        int pow = 0;
        while ((1 << pow) < max_n) pow++;
        return pow;
    }

    // add the idx to the current range
    void add(int idx) {

    }

    // remove the idx from the current range
    void remove(int idx) {

    }


    void set_range(query &q) {
        // add the new range and remove the old range
        while (curr_l > q.l) add(--curr_l);
        while (curr_r < q.r) add(++curr_r);
        while (curr_l < q.l) remove(curr_l++);
        while (curr_r > q.r) remove(curr_r--);
    }

    void Process() {

        sort(queries.begin(), queries.end());

        // to start with the first query
        curr_l = queries[0].l, curr_r = queries[0].l - 1;

        for (int i = 0; i < m; i++) {
            set_range(queries[i]);
            answers[queries[i].idx] = ans;
        }
    }

    void Print_queries_answers() {
        for (int i = 0; i < m; i++)
            cout << answers[i] << '\n';
    }
};

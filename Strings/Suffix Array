struct Suffix_array {
    int n, LOG;
    string s;
    vector<int> p, c, lcp;

    vector<vector<int>> sp;
    vector<int> Bin_Log;

    Suffix_array(string in) {
        s = in + "$";
        n = s.size();
        p.assign(n + 1, 0);
        c.assign(n + 1, 0);
        build0();
        buildk();
        lcp.assign(n, 0);
        build_LCP();
        Sparse();
    }

    void build0() {
        vector<pair<char, int>> a;
        for (int i = 0; i < n; ++i) a.push_back({s[i], i});
        sort(a.begin(), a.end());

        for (int i = 0; i < n; ++i) p[i] = a[i].second;
        c[p[0]] = 0;
        for (int i = 1; i < n; ++i) {
            if (a[i].first != a[i - 1].first) c[p[i]] = c[p[i - 1]] + 1;
            else c[p[i]] = c[p[i - 1]];
        }
    }

    void count_sort() {
        vector<int> freq(n), p_new(n), pos(n);
        for (int i = 0; i < n; ++i) ++freq[c[i]];

        pos[0] = 0;
        for (int i = 1; i < n; ++i)
            pos[i] = pos[i - 1] + freq[i - 1];

        for (int i = 0; i < n; ++i) p_new[pos[c[p[i]]]] = p[i], ++pos[c[p[i]]];

        p = p_new;
    }

    void buildk() {
        int k = 0;
        while ((1LL << k) < n) {
            vector<int> c_new(n);
            for (int i = 0; i < n; ++i) p[i] = ((p[i] - (1LL << k)) + n) % n;
            count_sort();
            c_new[p[0]] = 0;
            for (int i = 1; i < n; ++i) {
                pair<int, int> prev = {c[p[i - 1]], c[(p[i - 1] + (1LL << k)) % n]};
                pair<int, int> now = {c[p[i]], c[(p[i] + (1LL << k)) % n]};
                if (now != prev) c_new[p[i]] = c_new[p[i - 1]] + 1;
                else c_new[p[i]] = c_new[p[i - 1]];
            }
            c = c_new;
            ++k;
        }
    }

    void build_LCP() {
        int k = 0;
        for (int i = 0; i < n - 1; ++i) {
            int pi = c[i];
            int j = p[pi - 1];
            while (s[i + k] == s[j + k])++k;
            lcp[pi] = k;
            k = max(k - 1, 0LL);
        }
    }

    void Sparse() {
        LOG = __lg(n) + 1;
        sp.assign(n + 5, vector<int>(LOG + 2));
        Bin_Log.assign(n + 5, 0);
        for (int i = 2; i <= n; i++) Bin_Log[i] = Bin_Log[i >> 1] + 1;
        for (int i = 0; i < n; i++)
            sp[i][0] = lcp[i];
        for (int log = 1; log < LOG; log++)
            for (int i = 0; i + (1 << log) - 1 < n; i++)
                sp[i][log] = min(sp[i][log - 1], sp[i + (1 << (log - 1))][log - 1]);
    }

    int query(int L, int R) {
        int log = Bin_Log[R - L + 1];
        return min(sp[L][log], sp[R - (1 << log) + 1][log]);
    }

    int LCP(int i, int j) {
        return query(min(c[i], c[j]) + 1, max(c[i], c[j]));
    }
};
